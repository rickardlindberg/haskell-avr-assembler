-- Add Rr,Rd 0000 11rd dddd rrrr

data Instruction =
      Add Int Int
    | Sub Int Int

encode :: Instruction -> [Word16]
encode (Add r d) =
         0                      `shiftL` 15
    .|.  0                      `shiftL` 14
    .|.  0                      `shiftL` 13
    .|.  0                      `shiftL` 12
    .|.  1                      `shiftL` 11
    .|.  1                      `shiftL` 10
    .|.  ((r `shiftR` 4) .&. 1) `shiftL` 9
    .|.  ((d `shiftR` 4) .&. 1) `shiftL` 8
    .|.  ((d `shiftR` 3) .&. 1) `shiftL` 7
    .|.  ((d `shiftR` 2) .&. 1) `shiftL` 6
    .|.  ((d `shiftR` 1) .&. 1) `shiftL` 5
    .|.  ((d `shiftR` 0) .&. 1) `shiftL` 4
    .|.  ((r `shiftR` 3) .&. 1) `shiftL` 3
    .|.  ((r `shiftR` 2) .&. 1) `shiftL` 2
    .|.  ((r `shiftR` 1) .&. 1) `shiftL` 1
    .|.  ((r `shiftR` 0) .&. 1) `shiftL` 0

decode :: [Word16] -> (Instruction, [Word16])
decode (word:words)
    | word .&. 0xFC00 == 0x0C00 =
        let r =  (((word `shiftR` 9) .&. 1) `shiftL` 4)
             .|. (((word `shiftR` 3) .&. 1) `shiftL` 3)
             .|. (((word `shiftR` 2) .&. 1) `shiftL` 2)
             .|. (((word `shiftR` 1) .&. 1) `shiftL` 1)
             .|. (((word `shiftR` 0) .&. 1) `shiftL` 0)
            d =
             ...
            (word2:words) = words
         in (Add r d, words)
